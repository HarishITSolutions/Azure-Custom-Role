
# Azure Pipeline that run basic continuous integration on a Terraform project.

trigger:
 branches:
   include:
   - stage
   - Prod
   exclude:
   - dev
   - Pre-Prod
   - Stage-Master
   - Prod-Master
pool:
  vmImage: ubuntu-latest

variables:
  - group: 'Constants for Azure Build Sandbox'
  - group: 'Constants for Azure Build Prod'
  - name: "Storage_client_id"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}: 
      value: '$(Storage_client_id_Sandbox)'
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}: 
      value: '$(Storage_client_id_Production)'
  - name: "Storage_client_secret"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}: 
      value: '$(Storage_client_secret_Sandbox)'
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}: 
      value: '$(Storage_client_secret_Production)'
  - name: "environmentType"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}: 
      value: 'Sandbox'
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}: 
      value: 'Production'
  - name: "client_id"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: $(clientID_Sandbox)
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: $(clientID_Production)
  - name: "client_secret"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: $(clientSecret_Sandbox)
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: $(clientSecret_Production)
  - name: "tenant_id"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: $(tenant_id_Sandbox)
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: $(tenant_id_Production)
  - name: "subscription_id"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: $(subscription_id_Sandbox)
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: $(subscription_id_Production)
  - name: "Storage"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: "$(StorageSandbox)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: "$(StorageProd)"
  - name: "Container"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: "$(ContainerSandbox)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: "$(ContainerProd)"
  - name: "RG"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: "$(RGSandbox)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: "$(RGProd)"
  - name: "accessKey"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: "$(accessKeySandbox)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: "$(accessKeyProd)"
  - name: "Storage_tenant_id"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: "$(Storage_tenant_id_Sandbox)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: "$(Storage_tenant_id_prod)"
  - name: "sourcecustroleYAML"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: "$(sourcecustroleYAMLSandbox)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: "$(sourcecustroleYAMLProd)"
  - name: "CustroleStateFile"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
      value: "$(CustroleStateFileSandbox)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/Prod') }}:
      value: "$(CustroleStateFileProd)"

stages:
  - stage: Build_Approval
    displayName: Build Approval
    jobs:
    - deployment: Policy_and_MG_Build
      displayName: Build Process
      environment: $(environmentType)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: PowerShell@2
              displayName: "Microsoft Agent IP"
              continueOnError: false
              inputs:
                targetType: 'inline'
                script: |
                  $ip = Invoke-RestMethod http://ipinfo.io/json | Select -exp ip
                  Write-Host "ip is : $ip"

  - stage: Custom_Role_Creation
    displayName: Custom_Role_Creation 
    jobs:
    - job: ContinuousIntegrationJob
      displayName: Custom Role Creation
      steps:     
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              az login --service-principal -u $(Storage_client_id) -p $(Storage_client_secret) --tenant $(Storage_tenant_id)
              $ip = Invoke-RestMethod http://ipinfo.io/json | Select -exp ip
              Write-Host "ip is : $ip"
              az storage account network-rule add -g "$(RG)" --account-name "$(Storage)" --ip-address "$ip"
              Start-Sleep -Seconds 30
          displayName: 'Adding agent IP in storage account'
          continueOnError: false

        - task: TerraformCLI@0
          displayName: 'Terraform Init'
          continueOnError: false
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            commandOptions: '-backend=true -reconfigure -backend-config="storage_account_name=$(Storage)" -backend-config="container_name=$(Container)" -backend-config="key=$(CustroleStateFile)" -backend-config="access_key=$(accessKey)"'
            allowTelemetryCollection: true

        - task: TerraformCLI@0
          displayName: 'Terraform Validate'
          continueOnError: false
          inputs:
            command: 'validate'
            allowTelemetryCollection: true
            workingDirectory: '$(System.DefaultWorkingDirectory)'

        - task: TerraformCLI@0
          displayName: 'Terraform Plan'
          continueOnError: false
          inputs:
            command: 'plan'
            commandOptions: '-target="module.RoleAssignmentCreation" -var sourcecustrole-YAML=$(sourcecustroleYAML) -var subscriptionID=$(subscription_id) -var tenantID=$(tenant_id) -var clientID=$(client_id) -var clientSecret=$(client_secret)'
            allowTelemetryCollection: true
            workingDirectory: '$(System.DefaultWorkingDirectory)'
              
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              az login --service-principal -u $(Storage_client_id) -p $(Storage_client_secret) --tenant $(Storage_tenant_id)
              $ip = Invoke-RestMethod http://ipinfo.io/json | Select -exp ip
              Write-Host "ip is : $ip"
              az storage account network-rule remove --resource-group "$(RG)" --account-name "$(Storage)" --ip-address "$ip"
              Start-Sleep -Seconds 30
          displayName: 'Removal of agent IP in storage account'
          condition: succeededOrFailed()